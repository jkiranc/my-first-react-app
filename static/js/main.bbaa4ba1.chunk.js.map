{"version":3,"sources":["pages/homePage.js","pages/depositPage.js","actions/balanceActions.js","pages/withdrawPage.js","App.js","serviceWorker.js","store/balanceReducer.js","store/loanReducer.js","index.js"],"names":["HomePage","balance","useSelector","state","balanceReducer","loan","loanReducer","dispatch","useDispatch","className","disabled","onClick","type","DepositPage","setTimeout","payload","WithdrawPage","App","to","path","exact","component","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAsBeA,MAnBf,WACI,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAeH,WACpDI,EAAOH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,YAAYD,QAC9CE,EAAWC,cAKjB,OAAO,6BACH,wCACA,wCAAcP,GACd,4BAAKI,EAAO,eAAiB,eAC7B,4BAAQI,UAAU,eAClBC,WAAUL,EACVM,QAVJ,WACIJ,EAAS,CAAEK,KAAM,YAUZP,EAAO,eAAiB,oBCCtBQ,MAff,WACI,IAAMZ,EAAUC,aAAY,SAAAC,GAAK,OAAGA,EAAMC,eAAeH,WACnDI,EAAOH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,YAAYD,QAC9CE,EAAWC,cAKjB,OAAO,6BACH,4CACA,wCAAcP,GACd,4BAAKI,EAAO,eAAiB,eAC7B,4BAAQM,QAPZ,WACIJ,GCLG,SAAAA,GACHO,YAAW,WAAQP,EALhB,CAAEK,KAAM,UAAWG,QAAS,OAKW,UDU1C,aEEOC,MAff,WACI,IAAMf,EAAUC,aAAY,SAAAC,GAAK,OAAGA,EAAMC,eAAeH,WACnDI,EAAOH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,YAAYD,QAC9CE,EAAWC,cAKjB,OAAO,6BACH,4CACA,yCAAeP,GACf,4BAAKI,EAAO,eAAiB,eAC7B,4BAAQM,QAPZ,WACIJ,EAAS,CAACK,KAAK,WAAYG,QAAS,OAMpC,cCsBOE,MA9Bf,WAEE,OACE,kBAAC,IAAD,KACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,YACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWS,GAAG,KAAjC,SAGF,wBAAIT,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWS,GAAG,YAAjC,YAGF,wBAAIT,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWS,GAAG,aAAjC,cAIJ,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrB,IACjC,kBAAC,IAAD,CAAOmB,KAAK,WAAWC,OAAK,EAACC,UAAWR,IACxC,kBAAC,IAAD,CAAOM,KAAK,YAAYC,OAAK,EAACC,UAAWL,QCjB/BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YClBAC,EAAe,CACjB1B,QAAS,GAgBE2B,MAbf,WAAgD,IAA/BzB,EAA8B,uDAAtBwB,EAAcE,EAAQ,uCAC3C,OAAQA,EAAOjB,MACX,IAAK,UACD,MAAO,CAAEX,QAASE,EAAMF,QAAU4B,EAAOd,SAE7C,IAAK,WACD,MAAO,CAAEd,QAASE,EAAMF,QAAU4B,EAAOd,SAE7C,QACI,OAAOZ,ICbbwB,EAAe,CACjBtB,MAAM,GAaKuB,MAVf,WAAgD,IAA/BzB,EAA8B,uDAAtBwB,EACrB,QAD2C,wCAC5Bf,MACX,IAAK,QACD,MAAO,CAAEP,MAAM,GACnB,QACI,OAAOF,I,QCEb2B,EAAQC,YAAYC,YAAgB,CACtC5B,iBACAE,gBACA2B,YAAgBC,MAEpBC,IAASC,OAAO,kBAAC,IAAD,CAAUN,MAAOA,GAAO,kBAAC,EAAD,OAAoBO,SAASC,eAAe,SHiH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bbaa4ba1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nfunction HomePage() {\r\n    const balance = useSelector(state => state.balanceReducer.balance);\r\n    const loan = useSelector(state => state.loanReducer.loan);\r\n    const dispatch = useDispatch();\r\n    function applyLoanHandle() {\r\n        dispatch({ type: \"APPLY\" })\r\n    }\r\n\r\n    return <div>\r\n        <h1>HomePage</h1>\r\n        <h3>balance: {balance}</h3>\r\n        <h3>{loan ? \"Loan Applied\" : \"Loan Needed\"}</h3>\r\n        <button className=\"button-style\" \r\n        disabled={loan ? true : false} \r\n        onClick={applyLoanHandle}>\r\n            {loan ? \"Loan Applied\" : \"Apply for Loan\"}\r\n            </button>\r\n    </div>\r\n}\r\nexport default HomePage;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport * as balanceActions from './../actions/balanceActions';\r\n\r\nfunction DepositPage(){\r\n    const balance = useSelector(state=> state.balanceReducer.balance);\r\n    const loan = useSelector(state => state.loanReducer.loan);\r\n    const dispatch = useDispatch();\r\n\r\n    function onDepositHandle(){\r\n        dispatch(balanceActions.depositAsync());\r\n    }\r\n    return <div>\r\n        <h1>deposti page</h1>\r\n        <h3>Deposit: {balance}</h3>\r\n        <h3>{loan ? \"Loan Applied\" : \"Loan Needed\"}</h3>\r\n        <button onClick={onDepositHandle}>Deposit</button>\r\n    </div>\r\n}\r\nexport default DepositPage; ","export function deposit() {\r\n    return { type: \"DEPOSIT\", payload: 10 }\r\n}\r\n\r\nexport function depositAsync() {\r\n    return dispatch => {\r\n        setTimeout(() => { dispatch(deposit()) }, 5000)\r\n    }\r\n}","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nfunction WithdrawPage(){\r\n    const balance = useSelector(state=> state.balanceReducer.balance);\r\n    const loan = useSelector(state => state.loanReducer.loan);\r\n    const dispatch = useDispatch();\r\n\r\n    function onWithdrawHandle(){\r\n        dispatch({type:\"WITHDRAW\", payload: 10});\r\n    }\r\n    return <div>\r\n        <h1>deposti page</h1>\r\n        <h3>Withdraw: {balance}</h3>\r\n        <h3>{loan ? \"Loan Applied\" : \"Loan Needed\"}</h3>\r\n        <button onClick={onWithdrawHandle}>Withdraw</button>\r\n    </div>\r\n}\r\nexport default WithdrawPage;","import React from \"react\";\nimport './App.css';\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\nimport HomePage from './pages/homePage'\nimport DepositPage from './pages/depositPage'\nimport WithdrawPage from './pages/withdrawPage'\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ul className=\"ul-style\">\n            <li className=\"li-style\">\n              <NavLink className=\"App-link\" to=\"/\">Home\n              </NavLink>\n              </li>\n            <li className=\"li-style\">\n              <NavLink className=\"App-link\" to=\"/deposit\">Deposit\n              </NavLink>\n              </li>\n            <li className=\"li-style\">\n              <NavLink className=\"App-link\" to=\"/withdraw\">withdraw\n              </NavLink>\n              </li>\n          </ul>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/deposit\" exact component={DepositPage} />\n          <Route path=\"/withdraw\" exact component={WithdrawPage} />\n\n        </header>\n      </div >\n    </BrowserRouter >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    balance: 0\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"DEPOSIT\":\r\n            return { balance: state.balance + action.payload }\r\n\r\n        case \"WITHDRAW\":\r\n            return { balance: state.balance - action.payload }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","const initialState = {\r\n    loan: false\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"APPLY\":\r\n            return { loan: true }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport balanceReducer from './store/balanceReducer';\nimport loanReducer from './store/loanReducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(combineReducers({\n    balanceReducer,\n    loanReducer\n}), applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}